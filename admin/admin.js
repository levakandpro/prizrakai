// admin.js
document.querySelectorAll('.star-toggle').forEach(el =>
  el.addEventListener('click', () => el.classList.toggle('active'))
);
// 2) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏
document.querySelectorAll('.card.new .btn').forEach(btn =>
  btn.addEventListener('click', () => {
    const card = btn.closest('.card');
    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const statusEl = card.querySelector('.status');
    statusEl.classList.replace('pending','confirmed');
    statusEl.textContent = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';

    // —Å–Ω–∏–º–∞–µ–º —Ä–∞–º–∫—É new
    card.classList.remove('new');

    // –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Å–µ–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö
    const confirmedGrid = document.querySelector('h2.confirmed + .grid');
    confirmedGrid.appendChild(card);
  })
);
// 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
document.querySelector('.btn-confirm-all').addEventListener('click', () => {
  const confirmedGrid = document.querySelector('h2.confirmed + .grid');
  document.querySelectorAll('.card.new .checkbox:checked').forEach(input => {
    const card = input.closest('.card');
    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const statusEl = card.querySelector('.status');
    statusEl.classList.replace('pending','confirmed');
    statusEl.textContent = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
    // —Å–Ω–∏–º–∞–µ–º –∫–ª–∞—Å—Å new –∏ —Å—Ç–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º checkbox
    card.classList.remove('new');
    input.checked = false;
    // –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö
    confirmedGrid.appendChild(card);
  });
});
// 4) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
const filterSelect = document.querySelector('.filter');
filterSelect.addEventListener('change', () => {
  const mode = filterSelect.value;
  document.querySelectorAll('.card').forEach(card => {
    let show = false;
    if (mode.includes('–í—Å–µ –∑–∞—è–≤–∫–∏')) {
      show = true;
    } else if (mode.includes('–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ')) {
      show = card.classList.contains('new');
    } else if (mode.includes('–¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ')) {
      // –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞–ª–∏—á–∏–µ–º .delayed
      show = !!card.querySelector('.delayed');
    } else if (mode.includes('–¢–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ')) {
      show = card.querySelector('.status.confirmed') !== null;
    }
    card.style.display = show ? '' : 'none';
  });
});
// 5) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ —à–∞–ø–∫–µ
function updateSummary() {
  const all = document.querySelectorAll('.card').length;
  const pending = document.querySelectorAll('.card.new').length;
  const confirmed = document.querySelectorAll('.card .status.confirmed').length;

  document.querySelector('.pill.total strong').textContent = all;
  document.querySelector('.pill.pending strong').textContent = pending;
  document.querySelector('.pill.confirmed strong').textContent = confirmed;
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø–æ—Å–ª–µ –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
updateSummary();

// –î–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
document.querySelectorAll('.card .btn').forEach(btn =>
  btn.addEventListener('click', updateSummary)
);

// –ò –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
document.querySelector('.btn-confirm-all')
  .addEventListener('click', updateSummary);
// 6) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
function saveState() {
  const state = Array.from(document.querySelectorAll('.card')).map(card => ({
    id: card.querySelector('.info')?.textContent.trim(),  // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤—Ä–µ–º—è
    confirmed: !!card.querySelector('.status.confirmed'),
    starred: card.querySelector('.star-toggle').classList.contains('active'),
    checked: card.querySelector('.checkbox').checked
  }));
  localStorage.setItem('cardsState', JSON.stringify(state));
}

function loadState() {
  const saved = JSON.parse(localStorage.getItem('cardsState') || '[]');
  saved.forEach(item => {
    const card = Array.from(document.querySelectorAll('.card')).find(c =>
      c.querySelector('.info')?.textContent.trim() === item.id
    );
    if (!card) return;
    const star = card.querySelector('.star-toggle');
    const box  = card.querySelector('.checkbox');
    const statusEl = card.querySelector('.status');

    if (item.starred) star.classList.add('active');
    box.checked = item.checked;

    if (item.confirmed && statusEl.classList.contains('pending')) {
      statusEl.classList.replace('pending','confirmed');
      statusEl.textContent = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
      card.classList.remove('new');
      document.querySelector('h2.confirmed + .grid').appendChild(card);
    }
  });
}

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  loadState();
  updateSummary();
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
document.querySelectorAll('.star-toggle').forEach(el =>
  el.addEventListener('click', () => { saveState(); })
);
document.querySelectorAll('.card .btn').forEach(btn =>
  btn.addEventListener('click', () => { saveState(); })
);
document.querySelector('.btn-confirm-all').addEventListener('click', () => {
  saveState();
});
// 7) –ü–µ—Ä–µ–º–µ—â–∞—Ç—å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤—ë–∑–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–≤–µ—Ä—Ö —Å–µ–∫—Ü–∏–∏
function updateFavoritesOrder() {
  document.querySelectorAll('h2').forEach(section => {
    const grid = section.nextElementSibling;
    const cards = Array.from(grid.children);
    // —Å–Ω–∞—á–∞–ª–∞ ‚Äì starred, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    cards
      .filter(card => card.querySelector('.star-toggle').classList.contains('active'))
      .forEach(card => grid.insertBefore(card, grid.firstChild));
  });
}

// –í—ã–∑–æ–≤ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∑–≤–µ–∑–¥–µ –∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
document.querySelectorAll('.star-toggle').forEach(el =>
  el.addEventListener('click', () => {
    updateFavoritesOrder();
    saveState();
  })
);

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
document.addEventListener('DOMContentLoaded', () => {
  loadState();
  updateSummary();
  updateFavoritesOrder();
});
// 9) Collapse/Expand –∫–∞—Ä—Ç–æ—á–∫–∏
document.querySelectorAll('.card .header').forEach(header => {
  header.addEventListener('click', () => {
    header.closest('.card').classList.toggle('collapsed');
  });
});
// 10) –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
const searchInput = document.querySelector('.search');
searchInput.addEventListener('input', () => {
  const term = searchInput.value.trim().toLowerCase();
  document.querySelectorAll('.card').forEach(card => {
    const name = card.querySelector('.header').textContent.trim().toLowerCase();
    card.style.display = name.includes(term) ? '' : 'none';
  });
});
// 11) –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –ø–æ–∏—Å–∫–∞ –ø–æ ESC
document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape') {
    // –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞
    searchInput.value = '';
    searchInput.dispatchEvent(new Event('input'));
    // —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤ —Å–µ–ª–µ–∫—Ç–µ
    filterSelect.selectedIndex = 0;
    filterSelect.dispatchEvent(new Event('change'));
  }
});
// 12) –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é/—É–±—ã–≤–∞–Ω–∏—é)
const sortBtn = document.createElement('button');
sortBtn.textContent = '‚Üï –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ';
sortBtn.style.cssText = 'margin-left:16px;padding:10px 14px;border-radius:12px;border:1px solid #333;background:#1a1a1a;color:#fff;cursor:pointer;';
document.querySelector('.summary-card').appendChild(sortBtn);

let asc = true;
sortBtn.addEventListener('click', () => {
  const sections = ['.grid']; // –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º grid
  sections.forEach(sel => {
    const grid = document.querySelector(sel);
    const cards = Array.from(grid.children);
    cards.sort((a, b) => {
      const da = new Date(a.querySelector('.info').textContent);
      const db = new Date(b.querySelector('.info').textContent);
      return asc ? da - db : db - da;
    });
    cards.forEach(c => grid.appendChild(c));
  });
  asc = !asc;
  sortBtn.textContent = asc ? '‚Üë –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ' : '‚Üì –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ';
});
// 13) –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
const exportBtn = document.createElement('button');
exportBtn.textContent = 'üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV';
exportBtn.style.cssText = 'margin-left:8px;padding:10px 14px;border-radius:12px;border:1px solid #333;background:#1a1a1a;color:#fff;cursor:pointer;';
document.querySelector('.summary-card').appendChild(exportBtn);

exportBtn.addEventListener('click', () => {
  const rows = [['–ò–º—è','–í—Ä–µ–º—è','–°—Ç–∞—Ç—É—Å']];
  document.querySelectorAll('.card').forEach(card => {
    const name = card.querySelector('.header').textContent.trim();
    const time = card.querySelector('.info').textContent.trim();
    const status = card.querySelector('.status').textContent.trim();
    rows.push([name, time, status]);
  });
  const csv = rows.map(r => r.map(cell => `"${cell.replace(/"/g,'""')}"`).join(',')).join('\n');
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = 'zayavki.csv';
  link.click();
});
// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´–°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë¬ª
const resetBtn = document.createElement('button');
resetBtn.textContent = 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë';
resetBtn.style.cssText = 'margin-left:8px;padding:10px 14px;border-radius:12px;border:1px solid #f33;background:#1a1a1a;color:#f33;cursor:pointer;';
document.querySelector('.summary-card').appendChild(resetBtn);

resetBtn.addEventListener('click', () => {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?')) {
    localStorage.clear();
    location.reload();
  }
});
// 15) –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Enter ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É, Ctrl+Enter ‚Äî –º–∞—Å—Å–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
document.addEventListener('keydown', (e) => {
  if (e.key === 'Enter' && e.ctrlKey) {
    document.querySelector('.btn-confirm-all').click();
  } else if (e.key === 'Enter') {
    const active = document.activeElement;
    const card = active.closest && active.closest('.card');
    if (card) {
      const btn = card.querySelector('.btn');
      if (btn) btn.click();
    }
  }
});
const summary = document.querySelector('.summary-card');

// —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
const sortBtn = document.createElement('button');
sortBtn.textContent = '‚Üï –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ';
sortBtn.classList.add('action-btn');
summary.appendChild(sortBtn);
// ... –≤–∞—à –∫–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

// —ç–∫—Å–ø–æ—Ä—Ç
const exportBtn = document.createElement('button');
exportBtn.textContent = 'üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV';
exportBtn.classList.add('action-btn');
summary.appendChild(exportBtn);
// ... –≤–∞—à –∫–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

// —Å–±—Ä–æ—Å
const resetBtn = document.createElement('button');
resetBtn.textContent = 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë';
resetBtn.classList.add('action-btn','action-btn--danger');
summary.appendChild(resetBtn);
resetBtn.addEventListener('click', () => {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?')) {
    localStorage.clear();
    location.reload();
  }
});
